# This file is part of Radler.
#
# Radler is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Radler is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Radler.  If not, see <http://www.gnu.org/licenses/>.

'''
@license: GPLv3

Created on Jul, 2015

@author: Léonard Gérard leonard.gerard@sri.com

'''

from pydot import Dot, Graph, Node, Edge, Cluster

from radler.radlr.rast import AstVisitor, follow_links


def _n2c(n):
    qn = str(n._qname)
    return Cluster(qn, id=qn, label=str(n._name))

def _n2n(n):
    qn = str(n._qname)
    return Node(qn, id=qn, label=str(n._name))


def node(visitor, n, parentg):
    parentg.add_node(_n2n(n))

def machine(visitor, m, parentg):
    md = _n2c(m)
    parentg.add_subgraph(md)
    visitor.node_bf(m, md)


def plant2dot(plantinfo):
    qn = str(plantinfo.plant._qname)
    # Create the hierarchical graph with all the nodes (no edges for now)
    plantd = Dot(qn,
                 simplify=True,
                 comment="Generated by radler for {}".format(qn))
    v = AstVisitor({'node' : node,
                    'lynxsecure_vm' : machine,
                    'certikos_vm'   : machine,
                    'machine'       : machine },
                   onleaf=follow_links(AstVisitor.leaf_bf), #@UndefinedVariable
                   kind='bf')
    v.visit(plantinfo.plant, plantd)

    # Add all edges
    for cl in plantinfo.channels.values():
        for c in cl:
            if c.incoming:
                plantd.add_edge(Edge(str(c.pub), str(c.sub)))
    print(plantd.to_string())
